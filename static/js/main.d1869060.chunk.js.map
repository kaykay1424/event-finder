{"version":3,"sources":["Alert.js","CitySearch.js","mock-data.js","api.js","Event.js","EventList.js","NumberOfEvents.js","EventGenre.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Alert","props","getIcon","icon","getStyle","color","fontWeight","faExclamationTriangle","className","style","this","text","Component","InfoAlert","faInfoCircle","CitySearch","state","infoText","query","showSuggestions","undefined","suggestions","handleInputChange","value","locations","filter","location","toUpperCase","indexOf","length","setState","handleItemClick","selectedCity","updateEvents","htmlFor","id","type","onChange","e","target","onFocus","map","suggestion","onClick","mockData","JSON","parse","stringify","convertTime","time","timeArray","split","numHours","numMinutes","extractLocations","events","event","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","getAccessToken","localStorage","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","search","get","code","axios","results","authUrl","data","href","getToken","encodeCode","encodeURIComponent","access_token","setItem","getEvents","NProgress","start","startsWith","done","navigator","onLine","token","removeQuery","url","history","pushState","pathname","newurl","protocol","host","Event","showState","showDetails","eventStartDate","Date","dateTime","eventStartHours","getHours","console","log","eventStartMinutes","getMinutes","eventStartTime","eventEndDate","end","eventEndHours","eventEndMinutes","eventEndTime","summary","faClock","toDateString","faLocationArrow","faNewspaper","description","faCalendarAlt","htmlLink","rel","faChevronUp","faChevronDown","EventList","useState","setInfoText","useEffect","NumberOfEvents","numEvents","maxNumEvents","max","min","EventGenre","setData","getGenresData","colors","name","forEach","toLowerCase","i","genre","regex","RegExp","matches","match","object","ResponsiveContainer","width","height","PieChart","Legend","verticalAlign","Pie","cx","cy","labelLine","label","percent","toFixed","outerRadius","fill","dataKey","LabelList","position","entry","index","Cell","App","currentLocation","currentNumEvents","filteredCity","filteredEvents","selectedChart","showWelcomeScreen","showUserInput","getCitiesData","cities","city","hasOwnProperty","push","updatedEvents","slice","mounted","checked","faSearch","ScatterChart","margin","top","right","bottom","left","CartesianGrid","XAxis","YAxis","allowDecimals","Tooltip","cursor","strokeDasharray","Scatter","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","atatus","process","install","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d1869060.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faExclamationTriangle,\n    faInfoCircle\n} from '@fortawesome/free-solid-svg-icons';\n\nclass Alert extends Component {\n    constructor(props) {\n        super(props);\n        this.color = null;\n        this.icon = faExclamationTriangle;\n    }\n\n    getIcon = () => {\n        return <FontAwesomeIcon icon={this.icon} />;\n    }\n\n    getStyle = () => {\n        return {\n            color: this.color,\n            fontWeight: 'bold'\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"Alert\">\n                \n                <p style={this.getStyle()}>\n                    {this.props.text !== '' \n                        ? this.getIcon()\n                        : null} {this.props.text}</p>\n            </div>\n        );\n    }    \n}\n\nclass ErrorAlert extends Alert {\n    constructor(props) {\n        super(props);\n        this.color = '#BA5550';\n    }\n}\n\nclass InfoAlert extends Alert {\n    constructor(props) {\n        super(props);\n        this.color = '#31598F';\n        this.icon = faInfoCircle;\n    }\n}\n\nAlert.propTypes = {\n    text: PropTypes.string.isRequired\n};\n\nexport {ErrorAlert, InfoAlert};","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './CitySearch.css';\nimport {InfoAlert} from './Alert';\n\nclass CitySearch extends Component {\n    state = {\n        infoText: '',\n        query: '',\n        showSuggestions: undefined,\n        suggestions: []\n    }\n\n    handleInputChange = (value) => {\n        if (value === '') {\n            this.setState({\n                suggestions: [],\n                query: value\n            });\n            return;\n        }\n\t\t\n        const suggestions = this.props.locations.filter((location) => {\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n        });\n\n        if (suggestions.length === 0) {\n            this.setState({\n                infoText: 'No matching cities were found. Please try again.',\n                query: value,\n                suggestions\n            });\n        } else {\n            this.setState({\n                infoText: '',\n                query: value,\n                suggestions\n            });\n        }\n    }\n\n    handleItemClick = (selectedCity) => {\n        this.setState({\n            infoText: '',\n            query: selectedCity === 'all' ? 'All cities': selectedCity,\n            showSuggestions: false\n        });\n\n        this.props.updateEvents(selectedCity);\n    }\n\n    render() {\n        const {\n            query, \n            showSuggestions, \n            suggestions\n        } = this.state;\n        return (\n            <div className=\"City-Search\">\n                <label className=\"label\" htmlFor=\"city\">\n\t\t\t\t\tSearch for a city\n                </label>\n                <input \n                    id=\"city\"\n                    className=\"city\"\n                    type=\"text\" \n                    value={query}\n                    onChange={(e) => this.handleInputChange(e.target.value)}\n                    onFocus={() => this.setState({showSuggestions: true})}\n                /> \n                <ul \n                    className={`suggestions ${\n                        showSuggestions ? 'show': 'hide'}`}\n                >\n                    {suggestions.map(suggestion => (\n                        <li \n                            key={suggestion}\n                            onClick={() => this.handleItemClick(suggestion)}\n                        >\n                            {suggestion}\n                        </li>\n                    ))}\n                    <li \n                        key='all'\n                        onClick={() => this.handleItemClick('all')}\n                    >\n                        <b>See all cities</b>\n                    </li>\n                </ul>                \n                <InfoAlert \n                    text={this.state.infoText} \n                />\n            </div>\n        );\n    }\n}\n\nCitySearch.propTypes = {\n    locations: PropTypes.array.isRequired,\n    updateEvents: PropTypes.func\n};\n\nexport default CitySearch;\n","export const mockData = JSON.parse(JSON.stringify([\n    {\n        'kind': 'calendar#event',\n        'etag': '\"3181161784712000\"',\n        'id': '4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z',\n        'status': 'confirmed',\n        'htmlLink': 'https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\n        'created': '2020-05-19T19:17:46.000Z',\n        'updated': '2020-05-27T12:01:32.356Z',\n        'summary': 'Learn JavaScript',\n        'description': 'Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.',\n        'location': 'London, UK',\n        'creator': {\n            'email': 'fullstackwebdev@careerfoundry.com',\n            'self': true\n        },\n        'organizer': {\n            'email': 'fullstackwebdev@careerfoundry.com',\n            'self': true\n        },\n        'start': {\n            'dateTime': '2020-05-19T16:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'end': {\n            'dateTime': '2020-05-19T17:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'recurringEventId': '4eahs9ghkhrvkld72hogu9ph3e',\n        'originalStartTime': {\n            'dateTime': '2020-05-19T16:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'iCalUID': '4eahs9ghkhrvkld72hogu9ph3e@google.com',\n        'sequence': 0,\n        'reminders': {\n            'useDefault': true\n        },\n        'eventType': 'default'\n    },\n    {\n        'kind': 'calendar#event',\n        'etag': '\"3181159875584000\"',\n        'id': '3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z',\n        'status': 'confirmed',\n        'htmlLink': 'https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\n        'created': '2020-05-19T19:14:30.000Z',\n        'updated': '2020-05-27T11:45:37.792Z',\n        'summary': 'React is Fun',\n        'description': 'Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. ',\n        'location': 'Berlin, Germany',\n        'creator': {\n            'email': 'fullstackwebdev@careerfoundry.com',\n            'self': true\n        },\n        'organizer': {\n            'email': 'fullstackwebdev@careerfoundry.com',\n            'self': true\n        },\n        'start': {\n            'dateTime': '2020-05-20T14:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'end': {\n            'dateTime': '2020-05-20T15:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'recurringEventId': '3qtd6uscq4tsi6gc7nmmtpqlct',\n        'originalStartTime': {\n            'dateTime': '2020-05-20T14:00:00+02:00',\n            'timeZone': 'Europe/Berlin'\n        },\n        'iCalUID': '3qtd6uscq4tsi6gc7nmmtpqlct@google.com',\n        'sequence': 0,\n        'reminders': {\n            'useDefault': true\n        },\n        'eventType': 'default'\n    }\t   \n]));\n\n","import {mockData} from './mock-data';\nimport axios from 'axios';\nimport NProgress from 'nprogress';\n\nexport const convertTime = (time) => {\n    const timeArray = time.split(':');\n    const numHours = timeArray[0];\n    const numMinutes = timeArray[1];\n\n    if (numHours < 12) {\n        if (numHours === 0) return '12:' + numMinutes + 'am';\n        return time + 'am';\n    } \n    \n    return (numHours - 12 === 0 \n        ? 12 \n        : numHours - 12) + ':' + numMinutes + 'pm';\n    \n};\n\nexport const extractLocations = (events) => {\n    const extractLocations = events.map((event) => event.location);\n    const locations = [...new Set(extractLocations)];\n    return locations;\n};\n\nexport const checkToken = async (accessToken) => {\n    const result = await fetch(\n        // eslint-disable-next-line max-len\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    )\n        .then((res) => res.json())\n        .catch((error) => error.json());\n  \n    return result;\n};\n\nexport const getAccessToken = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    const tokenCheck = accessToken && (await checkToken(accessToken));\n\n    if (!accessToken || tokenCheck.error) {\n        await localStorage.removeItem('access_token');\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = await searchParams.get('code');\n        if (!code) {\n            const results = await axios.get(\n                // eslint-disable-next-line max-len\n                'https://cx7nza2e8i.execute-api.us-west-2.amazonaws.com/dev/api/get-auth-url'\n            );\n            const {authUrl} = results.data;\n            return (window.location.href = authUrl);\n        }\n        return code && getToken(code);\n    }\n    return accessToken;\n};\n\nconst getToken = async (code) => {\n    const encodeCode = encodeURIComponent(code);\n    const {access_token} = await fetch(\n        // eslint-disable-next-line max-len\n        `https://cx7nza2e8i.execute-api.us-west-2.amazonaws.com/dev/api/token/${encodeCode}`\n    ).then((res) => {\n        return res.json();\n    }).catch((error) => error);\n  \n    access_token && localStorage.setItem('access_token', access_token);\n  \n    return access_token;\n};\n\nexport const getEvents = async () => {\n    NProgress.start();\n\n    if (window.location.href.startsWith('http://localhost')) {\n        NProgress.done();\n        return mockData;\n    }\n\n    if (!navigator.onLine) {\n        const data = localStorage.getItem('lastEvents');\n        NProgress.done();\n        return data ? JSON.parse(data).events: [];\n    }\n\n    const token = await getAccessToken();\n\n    if (token) {\n        removeQuery();\n        // eslint-disable-next-line max-len\n        const url = `https://cx7nza2e8i.execute-api.us-west-2.amazonaws.com/dev/api/get-events/${token}`;\n        const result = await axios.get(url);\n        if (result.data) {\n            const locations = extractLocations(result.data.events);\n            localStorage.setItem('lastEvents', JSON.stringify(result.data));\n            localStorage.setItem('locations', JSON.stringify(locations));\n        }\n        NProgress.done();\n        return result.data.events;\n    }\n};\n\nconst removeQuery = () => {\n    if (window.history.pushState && window.location.pathname) {\n        const newurl =\n            window.location.protocol +\n            '//' +\n            window.location.host +\n            window.location.pathname;\n        window.history.pushState('', '', newurl);\n    } else {\n        const newurl = window.location.protocol + '//' + window.location.host;\n        window.history.pushState('', '', newurl);\n    }\n};","import React, {Component} from 'react';\nimport PropTypes, {shape} from 'prop-types';\nimport {convertTime} from './api';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faCalendarAlt,\n    faChevronDown,\n    faChevronUp,\n    faClock, \n    faLocationArrow,\n    faNewspaper\n} from '@fortawesome/free-solid-svg-icons';\nimport './Event.css';\n\nclass Event extends Component {\n    state = {\n        showState: false\n    }\n\n    render() {\n        const {event} = this.props;\n        const {showDetails} = this.state;\n        const eventStartDate = new Date(event.start.dateTime);\n        const eventStartHours = eventStartDate.getHours();\n        // eslint-disable-next-line no-console\n        console.log(new Date(event.start.dateTime));\n        // eslint-disable-next-line no-console\n        console.log(new Date(event.start.dateTime).getHours());\n        const eventStartMinutes = eventStartDate.getMinutes();\n        // eslint-disable-next-line no-unused-vars\n        const eventStartTime = `${eventStartHours}:${\n            eventStartMinutes === 0 ? '00' : eventStartMinutes}`;\n        const eventEndDate = new Date(event.end.dateTime);\n        const eventEndHours = eventEndDate.getHours();\n        // eslint-disable-next-line no-console\n        // console.log('end ' + eventEndHours);\n        const eventEndMinutes = eventEndDate.getMinutes();\n        // eslint-disable-next-line no-unused-vars\n        const eventEndTime = `${eventEndHours}:${\n            eventEndMinutes === 0 ? '00': eventEndMinutes}`;\n        return <div className=\"Event\">\n            <h3>{event.summary}</h3>\n            <p> \n                <FontAwesomeIcon icon={faClock} /> \n                {new Date(event.start.dateTime)\n                    .toDateString()} | {\n                    convertTime(eventStartTime)} - {convertTime(eventEndTime)}\n                \n            </p>\n            <p>\n                \n                <FontAwesomeIcon icon={faLocationArrow} /> {event.location}\n            </p>\n            <div \n                className={`details ${\n                    showDetails ? 'show': 'hide'\n                }`\n                }\n            >\n                <div>\n                    <FontAwesomeIcon icon={faNewspaper} />\n                    <p>\n                        \n                        {event.description}\n                    </p> \t\n                </div>\n                \n                <div>\n                    <FontAwesomeIcon icon={faCalendarAlt} />\n                    <p>\n                        <a \n                            href={event.htmlLink} \n                            rel=\"noreferrer\"\n                            target=\"_blank\">See details on Google Calendar\n                        </a>\n                    </p>\n                    \n                    \n                </div>\n            </div>\n            <button \n                className=\"toggle-details\"\n                onClick={() => this.setState({showDetails: !showDetails})}\n            >Details {this.state.showDetails \n                    ? <FontAwesomeIcon icon={faChevronUp} />\n                    : <FontAwesomeIcon icon={faChevronDown} />}</button>\n        </div>;\n    }\n}\n\nEvent.propTypes = {\n    event: shape({\n        description: PropTypes.string.required,\n        htmlLink: PropTypes.string.required\n    })\n};\nexport default Event;","import React, {useState, useEffect} from 'react';\nimport Event from './Event';\nimport PropTypes from 'prop-types';\nimport './EventList.css';\nimport {InfoAlert} from './Alert';\n\nconst EventList = ({events}) => {\n    const [infoText, setInfoText] = useState('');\n\n    useEffect(() => {\n        setInfoText(navigator.onLine \n            ? '' : `The list loaded may not be up to date. \n        Please go online to view the most current list.`);\n    }, [events]);\n\n    return (\n        <>\n            <InfoAlert \n                text={infoText} \n            />\n            <div className=\"event-list-container\">\n                \n                <ul className=\"Event-List\">\n                    {events.map(event =>\n                        <li key={event.id}>\n                            <Event event={event} />\n                        </li>\n                    )}\n                </ul>\n                \n            </div>\n            \n        </>\n    );\n};\n\nEventList.propTypes = {\n    events: PropTypes.array.isRequired\n};\n\nexport default EventList;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './NumberOfEvents.css';\n\nclass NumberOfEvents extends Component {\n    state = {\n        infoText: '',\n        numEvents: 20\n    }\n\n    handleInputChange = (value) => {\n        if (value < 0 || value > 50) {\n            this.setState({\n                infoText: 'Please enter a number between 0 and 50.',\n                numEvents: value\n            });\n        } else {\n            this.setState({\n                infoText: '',\n                numEvents: value\n            });\n        }\n        \n        \n\n        this.props.updateEvents(null, value);\n    }\n\n    render() {\n        return (\n            <div className=\"Number-Of-Events\">\n                <label \n                    className=\"label\" \n                    htmlFor=\"number\">Select number of events</label>\n                <input \n                    id=\"number\"\n                    className=\"number\"\n                    type=\"number\"\n                    value={this.props.maxNumEvents < this.state.numEvents \n                        ? this.props.maxNumEvents\n                        : this.state.numEvents \n                    }\n                    max={this.props.maxNumEvents}\n                    min=\"1\"\n                    onChange={(e) => this.handleInputChange(e.target.value)}\n                />\n            </div>\n        );\n    }\n}\n\nNumberOfEvents.propTypes = {\n    maxNumEvents: PropTypes.number,\n    updateEvents: PropTypes.func\n};\n\nexport default NumberOfEvents;\n","import React, {useEffect, useState} from 'react';\nimport {\n    PieChart, \n    Pie, \n    Cell, \n    LabelList, \n    Legend, \n    ResponsiveContainer\n} from 'recharts';\nimport PropTypes from 'prop-types';\n\n\n\n\nconst EventGenre = ({events}) => {\n    useEffect(() => {\n        setData(getGenresData());\n    }, [events]);\n\n    const [data, setData] = useState([]);\n\n    const colors = ['#6A8CFA', '#68B54C', '#FA3824', '#ED892B', '#8B69FA'];\n\n    const getGenresData = () => {\n        let data = [\n            {name: 'jQuery', value: 0},\n            {name: 'JavaScript', value: 0},\n            {name: 'React', value: 0},\n            {name: 'Angular', value: 0},\n            {name: 'Node', value: 0}\n        ];\n        \n        // Get number of events for each genre\n        events.forEach(({summary}) => {\n            summary = summary.toLowerCase();\n            for (let i = 0; i < data.length; i++) {\n                const genre = data[i].name;\n                const value = data[i].value;\n                const regex = new RegExp(genre.toLowerCase(), 'g');\n                const matches = summary.match(regex);\n            \n                if (matches) {\n                    data[i].value = value + matches.length;\n                }\n            }\n        });\n   \n        // Remove genres that have 0 events\n        data = data.filter((object) => {\n            return object.value === 0 ? false : true;\n        });\n\n        return data;\n    };\n\n    \n    return (\n        <div className=\"chart-container\">\n            <h3 className=\"text-center\">Events by genre</h3>\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <PieChart height={400}>\n                    <Legend verticalAlign=\"top\" height={30} />\n                    <Pie\n                        data={data}\n                        cx={200}\n                        cy={200}\n                        labelLine={false}\n                        label={({percent}) => {\n                            return `${(percent * 100).toFixed(0)}%`;}}\n                        outerRadius={120}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                    >\n                        <LabelList \n                            dataKey=\"name\" \n                            position=\"inside\"\n                        />\n                        {data.map((entry, index) => (\n                            <Cell key={index} fill={colors[index]} />\n                        ))}\n                    </Pie>\n                </PieChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nEventGenre.propTypes = {\n    events: PropTypes.array.isRequired\n};\n\nexport default EventGenre;","import React, {Component} from 'react';\nimport './App.css';\nimport './nprogress.css';\nimport CitySearch from './CitySearch';\nimport EventList from './EventList';\nimport NumberOfEvents from './NumberOfEvents';\nimport EventGenre from './EventGenre';\n// import WelcomeScreen from './WelcomeScreen';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faSearch\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n    // checkToken, \n    extractLocations, \n    // getAccessToken, \n    getEvents\n} from './api';\n\nimport {\n    ResponsiveContainer, \n    ScatterChart, \n    Scatter, \n    XAxis, \n    YAxis, \n    CartesianGrid, \n    Tooltip\n} from 'recharts';\n\nclass App extends Component {\n    state = {\n        currentLocation: 'all',\n        currentNumEvents: 20,\n        events: [],\n        filteredCity: '',\n        filteredEvents: [],\n        locations: [],\n        selectedChart: 'city',\n        showWelcomeScreen: undefined,\n        showUserInput: true\n    }\n\n    async componentDidMount() {\n        this.mounted = true;\n        // const accessToken = localStorage.getItem('access_token');\n        // const isTokenValid = (await checkToken(accessToken)).error \n        //     ? false : true;\n        // const searchParams = new URLSearchParams(window.location.search);\n        // const code = searchParams.get('code');\n        // this.setState({showWelcomeScreen: !(code || isTokenValid)});\n        // if ((code || isTokenValid) && this.mounted) {\n        getEvents().then((events) => {\n            if (this.mounted) {\n                this.setState({\n                    events, \n                    locations: extractLocations(events),\n                    maxNumEvents: events.length \n                });\n            }\n        });\n        // }       \n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    getCitiesData = () => {      \n        const data = [];\n        const cities = {};\n        const events = this.state.filteredEvents.length > 0 \n            ? this.state.filteredEvents\n            : this.state.events;\n        // Get number of events for each city\n        events.forEach(({location}) => {\n            let numEvents = 0;\n            if (cities.hasOwnProperty(location)) \n                numEvents = cities[location];\n\n            cities[location] = numEvents + 1; \n        });\n\n        for (const city in cities) {\n            data.push({\n                city: city.split(',')[0], // include only city without country\n                'number': cities[city]\n            });\n        }\n\n        return data;\n    }\n\n    updateEvents = async (location, numEvents) => { \n        let events;\n        if (location) {\n            this.setState({\n                currentLocation: location,\n                filteredCity: '',\n                filteredEvents: []\n            });\n\n            numEvents = this.state.currentNumEvents;\n            events = await getEvents();\n        } else if (!location) {\n            location = this.state.currentLocation;\n            this.setState({currentNumEvents: numEvents});\n            events = this.state.events;\n        }\n\n        let updatedEvents;\n        if (location === 'all') \n            updatedEvents = events;\n        else \n            updatedEvents = events.filter(event => \n                event.location === location\n            );\n\t\t\t\n        this.setState({\n            events: updatedEvents.slice(\n                0, numEvents),\n            maxNumEvents: updatedEvents.length    \n        });\n\n    }\n\n    render() {\n        const {\n            events, \n            filteredEvents,\n            locations, \n            selectedChart,\n            // showWelcomeScreen,\n            showUserInput\n        } = this.state;\n        const { \n            getCitiesData, \n            updateEvents\n        } = this;\n        // if (showWelcomeScreen === undefined) return <div className=\"App\" />;\n        \n        return (\n            <div className=\"App\">\n                <div className=\"sidebar\">\n                    \n                    {showUserInput ? \n                        <div className=\"user-input-container\">\n                            <span \n                                className=\"close\" \n                                onClick={() => \n                                    this.setState({\n                                        showUserInput: !showUserInput\n                                    })}\n                            >\n\t\t\t\t\t\t\t\t&times;\n                            </span>\n                            <CitySearch \n                                locations={locations} \n                                updateEvents={updateEvents} \n                            />\n                            <NumberOfEvents \n                                maxNumEvents={this.state.maxNumEvents} \n                                updateEvents={updateEvents} \n                            />\n                            <p className=\"label\">View events chart by:</p>\n                            <label htmlFor=\"events-by-genre\">Genre</label>\n                            <input \n                                id=\"events-by-genre\" \n                                type=\"radio\" \n                                name=\"chart\"\n                                value=\"Genre\" \n                                checked={selectedChart === 'genre' ?\n                                    true: false\n                                }\n                                onChange={() => this.setState({\n                                    selectedChart: 'genre'\n                                })}\n                            />\n                            \n                            <label \n                                htmlFor=\"events-by-city\"\n                            >\n\t\t\t\t\t\t\t\tCity\n                            </label>\n                            <input \n                                id=\"events-by-city\" \n                                type=\"radio\" \n                                name=\"chart\"\n                                value=\"City\"\n                                checked={selectedChart === 'city' ?\n                                    true: false\n                                } \n                                onChange={() => this.setState({\n                                    selectedChart: 'city'\n                                })}\n                            />\n                           \n                        </div>\n                        : <div className=\"search-icon-container\">\n                            <span \n                                className=\"search-icon\"\n                                onClick={() => \n                                    this.setState({\n                                        showUserInput: !showUserInput\n                                    })}\n                            ><FontAwesomeIcon icon={faSearch} /> </span>\n                        </div>}\n                </div>\n                \n\n\t\t\t\t\n                <div className=\"content\">\n                    <EventList \n                        events={filteredEvents.length > 0 \n                            ? filteredEvents : events} \n                    />\n                    <div className=\"data-vis-wrapper\">\n                    \n                        {selectedChart === 'genre' \n                            ? <EventGenre events={filteredEvents.length > 0 \n                                ? filteredEvents : events} />\n                            :\n                            <div className=\"chart-container\">\n                                <h3 className=\"text-center\">Events by city</h3>\n                                <ResponsiveContainer width=\"100%\" height={400}>\n                        \n                                    <ScatterChart\n                                        margin={{\n                                            top: 20, \n                                            right: 20, \n                                            bottom: 20, \n                                            left: 20,\n                                        }}\n                                    >\n                                        <CartesianGrid />\n                                        <XAxis \n                                            type=\"category\" \n                                            dataKey=\"city\" name=\"City\" />\n                                        <YAxis \n                                            allowDecimals={false}\n                                            type=\"number\" \n                                            dataKey=\"number\" \n                                            name=\"Number of events\" />\n                                        <Tooltip \n                                            cursor={{strokeDasharray: '3 3'}} \n                                        />\n                                        <Scatter \n                                            data={getCitiesData()} \n                                            fill=\"#8884d8\" \n                                        />\n                                    </ScatterChart>\n                                </ResponsiveContainer>\n                            </div>\n                        }\n                    </div>\n                </div>\n                {/* <WelcomeScreen \n                    showWelcomeScreen={this.state.showWelcomeScreen}\n                    getAccessToken={() => {getAccessToken();}} /> */}\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nrequire('dotenv').config();\nimport * as atatus from 'atatus-spa';\natatus.config(process.env.REACT_APP_ATATUS_KEY).install();\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}